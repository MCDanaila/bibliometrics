"""scopus

Revision ID: e97475514a35
Revises:
Create Date: 2023-05-17 10:54:22.589258

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op


# revision identifiers, used by Alembic.
revision = "e97475514a35"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "IngestionLog",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "source", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "record_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("args", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column(
            "dir_path", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "zip_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "xml_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "NotLinkedScopusCitation",
        sa.Column("citing_id", sa.BigInteger(), nullable=False),
        sa.Column("cited_sgrid", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("citing_id", "cited_sgrid"),
    )
    op.create_table(
        "ScopusAffiliation",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("afid", sa.BigInteger(), nullable=True),
        sa.Column("dptid", sa.BigInteger(), nullable=True),
        sa.Column(
            "organization", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "country", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "address", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_ScopusAffiliation_organization"),
        "ScopusAffiliation",
        ["organization"],
        unique=False,
    )
    op.create_table(
        "ScopusAuthor",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "degrees", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "given_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "surname", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "indexed_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "preferred_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "e_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ScopusSource",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("abbrev", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("issn", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "codencode", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "publisher", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_ScopusSource_name"), "ScopusSource", ["name"], unique=False
    )

    op.create_table(
        "ScopusPublication",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("sgrid", sa.BigInteger(), nullable=True),
        sa.Column("source_id", sa.BigInteger(), nullable=True),
        sa.Column("doi", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("ce_ern", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "publication_type",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "publication_language",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "alt_titles", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("publication_year", sa.Integer(), nullable=True),
        sa.Column("publication_month", sa.Integer(), nullable=True),
        sa.Column("publication_day", sa.Integer(), nullable=True),
        sa.Column(
            "author_keywords",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("volume", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("issue", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("page_first", sa.Integer(), nullable=True),
        sa.Column("page_last", sa.Integer(), nullable=True),
        sa.Column(
            "copyright", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "abstract", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "extra_authors", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "extra_affiliations",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["source_id"], ["ScopusSource.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "ScopusAuthorship",
        sa.Column("publication_id", sa.BigInteger(), nullable=False),
        sa.Column("author_id", sa.BigInteger(), nullable=False),
        sa.Column("affiliation_id", sa.BigInteger(), nullable=False),
        sa.Column("seq", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["affiliation_id"], ["ScopusAffiliation.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["author_id"], ["ScopusAuthor.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["publication_id"], ["ScopusPublication.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint(
            "publication_id", "author_id", "affiliation_id"
        ),
    )
    op.create_table(
        "ScopusCitation",
        sa.Column("citing_id", sa.BigInteger(), nullable=False),
        sa.Column("cited_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cited_id"],
            ["ScopusPublication.id"],
        ),
        sa.ForeignKeyConstraint(
            ["citing_id"],
            ["ScopusPublication.id"],
        ),
        sa.PrimaryKeyConstraint("citing_id", "cited_id"),
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("ScopusCitation")
    op.drop_table("ScopusAuthorship")

    op.drop_table("ScopusPublication")

    op.drop_index(op.f("ix_ScopusSource_name"), table_name="ScopusSource")
    op.drop_table("ScopusSource")
    op.drop_table("ScopusAuthor")
    op.drop_index(
        op.f("ix_ScopusAffiliation_organization"),
        table_name="ScopusAffiliation",
    )
    op.drop_table("ScopusAffiliation")
    op.drop_table("NotLinkedScopusCitation")
    op.drop_table("IngestionLog")
    # ### end Alembic commands ###
